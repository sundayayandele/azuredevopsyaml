trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
entitlements_api_url = f'https://vsaex.dev.azure.com/{organization}/_apis/userentitlements?api-version=7.1-preview-3'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor using userentitlements API
def get_user_descriptor(user_id, token):
    response = requests.get(entitlements_api_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        entitlements = response.json().get('value', [])
        for entitlement in entitlements:
            user = entitlement.get('user', {})
            if user.get('id') == user_id:
                return entitlement.get('descriptor')
        print(f'User descriptor not found for user ID: {user_id}')
        return None
    else:
        print(f'Error retrieving user entitlements: {response.status_code}, {response.text}')
        return None

# Function to get user memberships
def get_user_memberships(user_descriptor, token):
    memberships_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph/memberships/{user_descriptor}?api-version=6.0-preview&direction=down'
    response = requests.get(memberships_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('value', [])
        membership_names = [membership['member']['displayName'] for membership in memberships if 'member' in membership and 'displayName' in membership['member']]
        return membership_names
    else:
        print(f'Error retrieving user memberships: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('authoredBy', {}).get('displayName', 'Unknown')
                author_id = details.get('authoredBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_memberships = get_user_memberships(author_descriptor, token)
                    else:
                        author_memberships = []
                else:
                    author_memberships = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Memberships': author_memberships
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Memberships: {', '.join(detail['Author Memberships'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their memberships from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'


=================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
entitlements_api_url = f'https://vsaex.dev.azure.com/{organization}/_apis/userentitlements'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor using userentitlements API
def get_user_descriptor(user_id, token):
    user_entitlements_url = f'{entitlements_api_url}?api-version=6.0-preview'
    response = requests.get(user_entitlements_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        entitlements = response.json().get('value', [])
        for entitlement in entitlements:
            user = entitlement.get('user', {})
            if user.get('subjectkind') == 'user' and user.get('id') == user_id:
                return user.get('descriptor')
        print(f'User descriptor not found for user ID: {user_id}')
        return None
    else:
        print(f'Error retrieving user entitlements: {response.status_code}, {response.text}')
        return None

# Function to get user memberships
def get_user_memberships(user_descriptor, token):
    memberships_url = f'{entitlements_api_url}/{user_descriptor}/groups?api-version=6.0-preview'
    response = requests.get(memberships_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('value', [])
        membership_names = [membership['displayName'] for membership in memberships if 'displayName' in membership]
        return membership_names
    else:
        print(f'Error retrieving user memberships: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('authoredBy', {}).get('displayName', 'Unknown')
                author_id = details.get('authoredBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_memberships = get_user_memberships(author_descriptor, token)
                    else:
                        author_memberships = []
                else:
                    author_memberships = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Memberships': author_memberships
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Memberships: {', '.join(detail['Author Memberships'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their memberships from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'

============================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
entitlements_api_url = f'https://vsaex.dev.azure.com/{organization}/_apis/userentitlements'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor using userentitlements API
def get_user_descriptor(user_id, token):
    user_entitlements_url = f'{entitlements_api_url}?api-version=6.0-preview'
    response = requests.get(user_entitlements_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        entitlements = response.json().get('value', [])
        for entitlement in entitlements:
            user = entitlement.get('user', {})
            if user.get('id') == user_id:
                return user.get('descriptor')
        print(f'User descriptor not found for user ID: {user_id}')
        return None
    else:
        print(f'Error retrieving user entitlements: {response.status_code}, {response.text}')
        return None

# Function to get user memberships
def get_user_memberships(user_descriptor, token):
    memberships_url = f'{entitlements_api_url}/{user_descriptor}/groups?api-version=6.0-preview'
    response = requests.get(memberships_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('value', [])
        membership_names = [membership['displayName'] for membership in memberships if 'displayName' in membership]
        return membership_names
    else:
        print(f'Error retrieving user memberships: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('authoredBy', {}).get('displayName', 'Unknown')
                author_id = details.get('authoredBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_memberships = get_user_memberships(author_descriptor, token)
                    else:
                        author_memberships = []
                else:
                    author_memberships = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Memberships': author_memberships
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Memberships: {', '.join(detail['Author Memberships'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their memberships from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'







======================================================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
graph_api_version = '6.0-preview'
graph_base_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor using userentitlements API
def get_user_descriptor(user_id, token):
    user_entitlements_url = f'https://vssps.dev.azure.com/{organization}/_apis/userentitlements?api-version=6.0-preview'
    response = requests.get(user_entitlements_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        users = response.json().get('members', [])
        for user in users:
            if user.get('user', {}).get('id') == user_id:
                return user.get('user', {}).get('descriptor')
    print(f'Error retrieving user descriptor: {response.status_code}, {response.text}')
    return None

# Function to get user memberships
def get_user_memberships(user_descriptor, token):
    memberships_url = f'{graph_base_url}/memberships/{user_descriptor}?api-version={graph_api_version}&direction=down'
    response = requests.get(memberships_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('value', [])
        membership_names = [membership['member']['displayName'] for membership in memberships if 'member' in membership and 'displayName' in membership['member']]
        return membership_names
    else:
        print(f'Error retrieving user memberships: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('authoredBy', {}).get('displayName', 'Unknown')
                author_id = details.get('authoredBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_memberships = get_user_memberships(author_descriptor, token)
                    else:
                        author_memberships = []
                else:
                    author_memberships = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Memberships': author_memberships
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Memberships: {', '.join(detail['Author Memberships'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their memberships from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'


==================================================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
graph_api_version = '6.0-preview'
graph_base_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor using userentitlements API
def get_user_descriptor(user_id, token):
    user_entitlements_url = f'https://vssps.dev.azure.com/{organization}/_apis/userentitlements?api-version=6.0-preview'
    response = requests.get(user_entitlements_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        users = response.json().get('members', [])
        for user in users:
            if user.get('user', {}).get('id') == user_id:
                return user.get('user', {}).get('descriptor')
    print(f'Error retrieving user descriptor: {response.status_code}, {response.text}')
    return None

# Function to get user memberships
def get_user_memberships(user_descriptor, token):
    memberships_url = f'{graph_base_url}/memberships/{user_descriptor}?api-version={graph_api_version}&direction=down'
    response = requests.get(memberships_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('value', [])
        membership_names = [membership['member']['displayName'] for membership in memberships if 'member' in membership and 'displayName' in membership['member']]
        return membership_names
    else:
        print(f'Error retrieving user memberships: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('authoredBy', {}).get('displayName', 'Unknown')
                author_id = details.get('authoredBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_memberships = get_user_memberships(author_descriptor, token)
                    else:
                        author_memberships = []
                else:
                    author_memberships = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Memberships': author_memberships
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail



=====================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
graph_api_version = '7.1-preview.1'
graph_base_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor
def get_user_descriptor(user_id, token):
    user_url = f'{graph_base_url}/users/{user_id}?api-version={graph_api_version}'
    response = requests.get(user_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        user_info = response.json()
        return user_info['descriptor']
    else:
        print(f'Error retrieving user descriptor: {response.status_code}, {response.text}')
        return None

# Function to get user memberships
def get_user_memberships(user_descriptor, token):
    memberships_url = f'{graph_base_url}/memberships/{user_descriptor}?api-version={graph_api_version}&direction=down'
    response = requests.get(memberships_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('memberships', [])
        membership_names = [membership['displayName'] for membership in memberships if 'displayName' in membership]
        return membership_names
    else:
        print(f'Error retrieving user memberships: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('authoredBy', {}).get('displayName', 'Unknown')
                author_id = details.get('authoredBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_memberships = get_user_memberships(author_descriptor, token)
                    else:
                        author_memberships = []
                else:
                    author_memberships = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Memberships': author_memberships
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Memberships: {', '.join(detail['Author Memberships'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their memberships from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'


===============
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
graph_api_version = '7.1-preview.1'
graph_base_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user descriptor
def get_user_descriptor(user_id, token):
    user_url = f'{graph_base_url}/users/{user_id}?api-version={graph_api_version}'
    response = requests.get(user_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        user_info = response.json()
        return user_info['descriptor']
    else:
        print(f'Error retrieving user descriptor: {response.status_code}, {response.text}')
        return None

# Function to get user groups
def get_user_groups(user_descriptor, token):
    groups_url = f'{graph_base_url}/memberships/{user_descriptor}?api-version={graph_api_version}&direction=down'
    response = requests.get(groups_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        groups = response.json().get('memberships', [])
        group_names = [group['principalName'] for group in groups if 'principalName' in group]
        return group_names
    else:
        print(f'Error retrieving user groups: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('createdBy', {}).get('displayName', 'Unknown')
                author_id = details.get('createdBy', {}).get('id', None)
                if author_id:
                    author_descriptor = get_user_descriptor(author_id, token)
                    if author_descriptor:
                        author_groups = get_user_groups(author_descriptor, token)
                    else:
                        author_groups = []
                else:
                    author_groups = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Groups': author_groups
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Groups: {', '.join(detail['Author Groups'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their groups from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'



=================================================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
graph_api_version = '7.1-preview.1'
graph_memberships_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph/memberships'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user groups
def get_user_groups(user_descriptor, token):
    groups_url = f'{graph_memberships_url}/{user_descriptor}?api-version={graph_api_version}'
    response = requests.get(groups_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        memberships = response.json().get('value', [])
        group_names = []
        for membership in memberships:
            if 'principalName' in membership['member']:
                group_names.append(membership['member']['principalName'])
        return group_names
    else:
        print(f'Error retrieving user groups: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('createdBy', {}).get('displayName', 'Unknown')
                author_descriptor = details.get('createdBy', {}).get('descriptor', None)
                if author_descriptor:
                    author_groups = get_user_groups(author_descriptor, token)
                else:
                    author_groups = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Groups': author_groups
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Groups: {', '.join(detail['Author Groups'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their groups from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'




=============================================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
graph_api_version = '7.1-preview.1'
graph_base_url = f'https://vssps.dev.azure.com/{organization}/_apis/graph/users'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to get user groups
def get_user_groups(user_descriptor, token):
    groups_url = f'{graph_base_url}/{user_descriptor}/memberships?api-version={graph_api_version}'
    response = requests.get(groups_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        groups = response.json().get('value', [])
        group_names = [group['principalName'] for group in groups if 'principalName' in group]
        return group_names
    else:
        print(f'Error retrieving user groups: {response.status_code}, {response.text}')
        return []

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('createdBy', {}).get('displayName', 'Unknown')
                author_descriptor = details.get('createdBy', {}).get('descriptor', None)
                if author_descriptor:
                    author_groups = get_user_groups(author_descriptor, token)
                else:
                    author_groups = []
                pipeline_details.append({
                    'Pipeline Name': pipeline_name,
                    'Repository Name': repository_name,
                    'Author': author_name,
                    'Author Groups': author_groups
                })

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}, Author Groups: {', '.join(detail['Author Groups'])}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, authors, and their groups from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'



============================================================================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'

# List of folder filters
folder_filters = ['\\S0123\\abc', '\\S0123\\def', '\\S0123\\aba', '\\S0123\\riso', '\\S0123\\ahs', '\\S0123\\eid']

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_paths, token):
    pipeline_details = []

    def traverse_folders(current_folder):
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('createdBy', {}).get('displayName', 'Unknown')
                pipeline_details.append({'Pipeline Name': pipeline_name, 'Repository Name': repository_name, 'Author': author_name})

        # Check for subfolders and traverse them
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            for item in result.get('value', []):
                if item.get('folder', False):
                    traverse_folders(item['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    for folder_path in folder_paths:
        traverse_folders(folder_path)
    
    return pipeline_details

# Get the list of pipeline details recursively for multiple folder filters
pipeline_details = find_pipeline_details_recursively(folder_filters, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, and authors from folders'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'

===============================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
folder_filter = '\\S0123'  # Specify your folder path here

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder and its subfolders
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        print(f'Requesting pipelines from: {pipelines_url}')
        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to recursively get pipeline details from a folder and its subfolders
def find_pipeline_details_recursively(folder_path, token):
    pipeline_details = []

    # Initial list of folders to process
    folders_to_process = [folder_path]

    while folders_to_process:
        current_folder = folders_to_process.pop()
        pipelines = get_pipelines_from_folder(current_folder, token)
        
        for pipeline in pipelines:
            pipeline_id = pipeline['id']
            details = get_pipeline_details(pipeline_id, token)
            if details:
                pipeline_name = details['name']
                repository_name = details.get('repository', {}).get('name', 'Unknown')
                author_name = details.get('createdBy', {}).get('displayName', 'Unknown')
                pipeline_details.append({'Pipeline Name': pipeline_name, 'Repository Name': repository_name, 'Author': author_name})
        
        # Check for subfolders and add them to the list of folders to process
        subfolders_url = f'{base_url}?api-version={api_version}&path={current_folder}&folder=true'
        response = requests.get(subfolders_url, headers={'Authorization': f'Bearer {token}'})
        if response.status_code == 200:
            result = response.json()
            subfolders = result.get('value', [])
            for subfolder in subfolders:
                if subfolder['folder']:
                    folders_to_process.append(subfolder['path'])
        else:
            print(f'Error retrieving subfolders: {response.status_code}, {response.text}')

    return pipeline_details

# Get the list of pipeline details recursively
pipeline_details = find_pipeline_details_recursively(folder_filter, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, and authors from folder'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'


===============================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
folder_filter = '\\S0123'  # Specify your folder path here

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder and its subfolders
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        print(f'Requesting pipelines from: {pipelines_url}')
        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to find pipeline details based on folder path
def find_pipeline_details(folder_path, token):
    pipelines = get_pipelines_from_folder(folder_path, token)
    pipeline_details = []

    print(f'Found {len(pipelines)} pipelines')
    for pipeline in pipelines:
        pipeline_id = pipeline['id']
        details = get_pipeline_details(pipeline_id, token)
        if details:
            pipeline_name = details['name']
            repository_name = details.get('repository', {}).get('name', 'Unknown')
            author_name = details.get('createdBy', {}).get('displayName', 'Unknown')
            pipeline_details.append({'Pipeline Name': pipeline_name, 'Repository Name': repository_name, 'Author': author_name})
    
    return pipeline_details

# Get the list of pipeline details
pipeline_details = find_pipeline_details(folder_filter, token)

# Save the result to a JSON file
with open('pipeline_details.json', 'w') as f:
    json.dump(pipeline_details, f, indent=2)

# Print the result for logging purposes
for detail in pipeline_details:
    print(f"Pipeline Name: {detail['Pipeline Name']}, Repository Name: {detail['Repository Name']}, Author: {detail['Author']}")

EOF
  displayName: 'Run Python script to list pipeline names, repository names, and authors from folder'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipeline_details.json'
    ArtifactName: 'pipeline_details'


==============================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
folder_filter = '\\S0123'  # Specify your folder path here

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines from a specific folder and its subfolders
def get_pipelines_from_folder(folder_path, token):
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}&path={folder_path}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        print(f'Requesting pipelines from: {pipelines_url}')
        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id, token):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to find pipeline build IDs and names based on folder path
def find_pipeline_ids_and_names(folder_path, token):
    pipelines = get_pipelines_from_folder(folder_path, token)
    pipelines_info = []

    print(f'Found {len(pipelines)} pipelines')
    for pipeline in pipelines:
        pipeline_id = pipeline['id']
        pipeline_name = pipeline['name']
        
        details = get_pipeline_details(pipeline_id, token)
        if details:
            owner = details.get('createdBy', {}).get('displayName', 'Unknown')
            pipelines_info.append({'Build ID': pipeline_id, 'Pipeline Name': pipeline_name, 'Owner': owner})
    
    return pipelines_info

# Get the list of pipeline build IDs and names
pipelines_info = find_pipeline_ids_and_names(folder_filter, token)

# Save the result to a JSON file
with open('pipelines_info.json', 'w') as f:
    json.dump(pipelines_info, f, indent=2)

# Print the result for logging purposes
for info in pipelines_info:
    print(f"Build ID: {info['Build ID']}, Pipeline Name: {info['Pipeline Name']}, Owner: {info['Owner']}")

EOF
  displayName: 'Run Python script to list pipeline build IDs, names, and owners from folder'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)  # Use the access token provided by the service connection

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipelines_info.json'
    ArtifactName: 'pipelines_info'


===========================================================
trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
- task: UsePythonVersion@0
  inputs:
    versionSpec: '3.x'
    addToPath: true

- script: |
    pip install requests
    python - <<EOF
import requests
import json
import os

# Azure DevOps configuration
organization = 'SAAM'
project = 'Abc'
api_version = '6.0'
base_url = f'https://dev.azure.com/{organization}/{project}/_apis/build/definitions'
repo_name_prefix = 'S0123'

# Retrieve system access token from the environment
token = os.getenv('SYSTEM_ACCESSTOKEN')

# Function to get all pipelines
def get_all_pipelines():
    pipelines = []
    continuation_token = None

    while True:
        pipelines_url = f'{base_url}?api-version={api_version}'
        if continuation_token:
            pipelines_url += f'&continuationToken={continuation_token}'

        print(f'Requesting pipelines from: {pipelines_url}')
        response = requests.get(pipelines_url, headers={'Authorization': f'Bearer {token}'})
        
        if response.status_code == 200:
            result = response.json()
            pipelines.extend(result.get('value', []))
            continuation_token = result.get('continuationToken', None)
            if not continuation_token:
                break
        else:
            print(f'Error retrieving pipelines: {response.status_code}, {response.text}')
            break

    return pipelines

# Function to get pipeline details (including repository info)
def get_pipeline_details(pipeline_id):
    pipeline_url = f'{base_url}/{pipeline_id}?api-version={api_version}'
    response = requests.get(pipeline_url, headers={'Authorization': f'Bearer {token}'})
    
    if response.status_code == 200:
        return response.json()
    else:
        print(f'Error retrieving pipeline details: {response.status_code}, {response.text}')
        return None

# Function to find pipeline build IDs and names based on repository name prefix
def find_pipeline_ids_and_names():
    pipelines = get_all_pipelines()
    pipelines_info = []

    print(f'Found {len(pipelines)} pipelines')
    for pipeline in pipelines:
        pipeline_id = pipeline['id']
        pipeline_name = pipeline['name']
        
        details = get_pipeline_details(pipeline_id)
        if details:
            repository = details.get('repository', {})
            repo_name = repository.get('name', '')
            
            # Debug information
            print(f'Checking pipeline: {pipeline_name}, Repo Name: {repo_name}')
            
            # Check if the repository name starts with the specified prefix
            if repo_name.startswith(repo_name_prefix):
                pipelines_info.append({'Build ID': pipeline_id, 'Pipeline Name': pipeline_name})
    
    return pipelines_info

# Get the list of pipeline build IDs and names
pipelines_info = find_pipeline_ids_and_names()

# Save the result to a JSON file
with open('pipelines_info.json', 'w') as f:
    json.dump(pipelines_info, f, indent=2)

# Print the result for logging purposes
for info in pipelines_info:
    print(f"Build ID: {info['Build ID']}, Pipeline Name: {info['Pipeline Name']}")

EOF
  displayName: 'Run Python script to list pipeline build IDs and names'
  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

- task: PublishBuildArtifacts@1
  inputs:
    PathtoPublish: 'pipelines_info.json'
    ArtifactName: 'pipelines_info'
