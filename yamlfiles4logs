from atlassian import Confluence
import os
import markdown2
import xml.etree.ElementTree as ET

def read_md_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def convert_to_confluence_storage_format(md_content):
    # Convert Markdown to HTML
    html_content = markdown2.markdown(md_content)

    # Parse the HTML content
    root = ET.fromstring(html_content)

    # Convert HTML elements to Confluence storage format
    confluence_content = ''
    for element in root:
        if element.tag == 'h1':
            confluence_content += f'h1. {element.text}\n'
        elif element.tag == 'h2':
            confluence_content += f'h2. {element.text}\n'
        elif element.tag == 'h3':
            confluence_content += f'h3. {element.text}\n'
        elif element.tag == 'h4':
            confluence_content += f'h4. {element.text}\n'
        elif element.tag == 'h5':
            confluence_content += f'h5. {element.text}\n'
        elif element.tag == 'h6':
            confluence_content += f'h6. {element.text}\n'
        elif element.tag == 'p':
            confluence_content += f'{element.text}\n'
        elif element.tag == 'ul':
            for li in element.findall('li'):
                confluence_content += f'* {li.text}\n'
        elif element.tag == 'ol':
            for i, li in enumerate(element.findall('li'), start=1):
                confluence_content += f'# {i}. {li.text}\n'
        elif element.tag == 'hr':
            confluence_content += '----\n'
        elif element.tag == 'a':
            confluence_content += f'[{element.text}|{element.get("href")}]\n'
        elif element.tag == 'img':
            confluence_content += f'!{element.get("src")}!\n'

    return confluence_content

def main():
    # Assuming your Azure repo file path is stored in a variable like azure_repo_file_path
    azure_repo_file_path = "/path/to/azure/repo/file.md"

    # Read content from the Azure repo file
    md_content = read_md_file(azure_repo_file_path)

    # Convert Markdown content to Confluence storage format
    confluence_content = convert_to_confluence_storage_format(md_content)

    # Initialize Confluence connection
    confluence = Confluence(
        url="http://localhost:8090",
        username="admin",
        password="admin"
    )

    # Update Confluence page with the new body content
    status = confluence.update_page(
        parent_id=None,  # Provide parent_id if it's a child page
        page_id=123456,  # Provide the ID of the page you want to update
        title="This is the new title",
        body=confluence_content,  # Pass the content in Confluence storage format
    )

    # Print the status
    print(status)

if __name__ == "__main__":
    main()

=============================================================================================================
from atlassian import Confluence
import os
import re

def read_md_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

def convert_to_confluence_storage_format(md_content):
    # Convert Markdown to Confluence storage format
    # Convert headers
    md_content = re.sub(r'^(#+)(.*)$', lambda match: f'h{len(match.group(1))}.{match.group(2)}', md_content, flags=re.MULTILINE)

    # Convert lists
    md_content = re.sub(r'^(\s*)\*(.*)$', lambda match: f'{match.group(1)}* {match.group(2)}', md_content, flags=re.MULTILINE)
    md_content = re.sub(r'^(\s*)-(.*)$', lambda match: f'{match.group(1)}* {match.group(2)}', md_content, flags=re.MULTILINE)

    return md_content

def main():
    # Assuming your Azure repo file path is stored in a variable like azure_repo_file_path
    azure_repo_file_path = "/path/to/azure/repo/file.md"

    # Read content from the Azure repo file
    md_content = read_md_file(azure_repo_file_path)

    # Convert Markdown content to Confluence storage format
    confluence_content = convert_to_confluence_storage_format(md_content)

    # Initialize Confluence connection
    confluence = Confluence(
        url="http://localhost:8090",
        username="admin",
        password="admin"
    )

    # Update Confluence page with the new body content
    status = confluence.update_page(
        parent_id=None,  # Provide parent_id if it's a child page
        page_id=123456,  # Provide the ID of the page you want to update
        title="This is the new title",
        body=confluence_content,  # Pass the content in Confluence storage format
    )

    # Print the status
    print(status)

if __name__ == "__main__":
    main()

======================================================================
def convert_to_confluence_storage_format(md_content):
    # Convert Markdown to HTML
    html_content = markdown2.markdown(md_content)

    # Wrap HTML content with Confluence storage format tags
    confluence_content = '<ac:structured-macro ac:name="html"><ac:plain-text-body><![CDATA[' + html_content + ']]></ac:plain-text-body></ac:structured-macro>'

    return confluence_content

===============================================
from atlassian import Confluence

confluence = Confluence(url="http://localhost:8090", username="admin", password="admin")

status = confluence.update_page(
    parent_id=None,
    page_id=123456,
    title="This is the new title",
    body="This is the new body",
)
======================================

from atlassian import Confluence
import os

def read_md_file(file_path):
    with open(file_path, 'r', encoding='utf-8') as file:
        return file.read()

# Assuming your Azure repo file path is stored in a variable like azure_repo_file_path
azure_repo_file_path = "/path/to/azure/repo/file.md"

# Read content from the Azure repo file
md_content = read_md_file(azure_repo_file_path)

# Initialize Confluence connection
confluence = Confluence(
    url="http://localhost:8090",
    username="admin",
    password="admin"
)

# Update Confluence page with the new body content
status = confluence.update_page(
    parent_id=None,  # Provide parent_id if it's a child page
    page_id=123456,  # Provide the ID of the page you want to update
    title="This is the new title",
    body=md_content,  # Pass the content of the Azure repo file as the body
)

# Print the status
print(status)



=======================+
trigger:
- '*'

pr:
- '*'

pr: 'refs/pull/*'

jobs:
- job: DownloadLogs
  steps:
  - task: DownloadPipelineArtifact@2
    inputs:
      buildType: 'pipeline'
      project: 'YourProjectName'
      definition: 'PipelineDefinitionName' # Replace with the name of the pipeline you want to download logs from
      buildVersion: $(Build.BuildId)
      targetPath: '$(System.ArtifactsDirectory)/logs' # Define the directory to save the log files
      buildTypeSelect: 'current'

  - script: |
      # Compress the log files into a single ZIP archive
      cd $(System.ArtifactsDirectory)/logs
      zip -r log_files.zip .
      echo "Log files zipped successfully."
    displayName: 'Zip Log Files'

  - task: PublishPipelineArtifact@1
    inputs:
      targetPath: '$(System.ArtifactsDirectory)/logs/log_files.zip'
      artifact: 'log-artifact'
