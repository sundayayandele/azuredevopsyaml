import os
import base64
import json
import requests

# Azure DevOps details
azure_devops_org = "YourOrganization"
project_name = "YourProject"
pipeline_id = 15  # Replace with the actual pipeline definition ID

# API URL to trigger the pipeline
url = f"https://dev.azure.com/{azure_devops_org}/{project_name}/_apis/build/builds?api-version=6.0"

# Get the System.AccessToken from environment variables
pat_token = os.getenv("SYSTEM_ACCESSTOKEN")  # Azure DevOps automatically provides this in pipelines

if not pat_token:
    print("Error: SYSTEM_ACCESSTOKEN is not set. Make sure 'Allow scripts to access the OAuth token' is enabled.")
    exit(1)

# Encode the token in Base64 for authentication
auth_header = base64.b64encode(f":{pat_token}".encode()).decode()

# Define pipeline parameters
params = {
    "environment": "production",
    "deploymentRegion": "us-east"
}

# Request body
body = {
    "definition": {"id": pipeline_id},
    "sourceBranch": "refs/heads/main",
    "parameters": json.dumps(params)
}

# Headers for authentication
headers = {
    "Authorization": f"Basic {auth_header}",
    "Content-Type": "application/json"
}

# Trigger the pipeline
response = requests.post(url, headers=headers, json=body)

# Print response
if response.status_code == 201:
    print("✅ Pipeline triggered successfully!")
else:
    print(f"❌ Error triggering pipeline: {response.status_code}, {response.text}")
=========
stages:
  - stage: TriggerPipeline
    jobs:
      - job: TriggerJob
        steps:
          - checkout: none
          - task: UsePythonVersion@0
            inputs:
              versionSpec: "3.x"

          - script: |
              python trigger_pipeline.py
            displayName: "Run Python script to trigger pipeline"
            env:
              SYSTEM_ACCESSTOKEN: $(System.AccessToken)






==============================
trigger: none  # The orchestrator does not trigger automatically

parameters:
  environment: 'production'
  deploymentRegion: 'us-east'
  ns1: false
  ns2: false

variables:
  azureDevOpsOrgUrl: "https://dev.azure.com/YourOrganization"
  projectName: "YourProject"
  systemToken: "$(System.AccessToken)"  # Use built-in Azure DevOps token

stages:
  - ${{ if eq(parameters.ns1, true) }}:
      - stage: TriggerPower1
        displayName: "Trigger Power1 Pipeline"
        jobs:
          - job: TriggerPower1Job
            displayName: "Trigger Power1 Pipeline via REST API"
            steps:
              - checkout: none  # No need to fetch code
              - task: PowerShell@2
                displayName: "Trigger Power1 Pipeline"
                inputs:
                  targetType: 'inline'
                  script: |
                    $uri = "$(azureDevOpsOrgUrl)/$(projectName)/_apis/build/builds?api-version=6.0"
                    $body = @{
                      definition = @{ id = 1 }  # Change '1' to Power1 pipeline ID
                      sourceBranch = "refs/heads/main"
                      parameters = @{
                        environment = "${{ parameters.environment }}"
                        deploymentRegion = "${{ parameters.deploymentRegion }}"
                      } | ConvertTo-Json -Compress
                    } | ConvertTo-Json -Depth 10
                    
                    $authHeader = "Bearer $(systemToken)"

                    $headers = @{
                      Authorization = $authHeader
                      "Content-Type" = "application/json"
                    }
                    
                    Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body

  - ${{ if eq(parameters.ns2, true) }}:
      - stage: TriggerPower2
        displayName: "Trigger Power2 Pipeline"
        jobs:
          - job: TriggerPower2Job
            displayName: "Trigger Power2 Pipeline via REST API"
            steps:
              - checkout: none
              - task: PowerShell@2
                displayName: "Trigger Power2 Pipeline"
                inputs:
                  targetType: 'inline'
                  script: |
                    $uri = "$(azureDevOpsOrgUrl)/$(projectName)/_apis/build/builds?api-version=6.0"
                    $body = @{
                      definition = @{ id = 2 }  # Change '2' to Power2 pipeline ID
                      sourceBranch = "refs/heads/main"
                      parameters = @{
                        environment = "${{ parameters.environment }}"
                        deploymentRegion = "${{ parameters.deploymentRegion }}"
                      } | ConvertTo-Json -Compress
                    } | ConvertTo-Json -Depth 10
                    
                    $authHeader = "Bearer $(systemToken)"

                    $headers = @{
                      Authorization = $authHeader
                      "Content-Type" = "application/json"
                    }
                    
                    Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body

-----------------------------
steps:
- bash: |
    if [[ "$(Build.SourceBranch)" == "refs/heads/main" ]]; then
      org="your-organization-name"  # Your Azure DevOps org name
      project="$(System.TeamProject)"
      url="https://dev.azure.com/$org/$project/_apis/build/builds?api-version=7.1-preview.1"

      # Define parameters as a JSON string
      params='{"Param1":"value1", "Param2":"value2", "FlagParam":true}'

      # Use jq to format the body
      body=$(jq -n \
        --argjson defId 9999 \
        --argjson params "$params" \
        '{definition: {id: $defId}, parameters: $params}')

      curl -X POST "$url" \
        -H "Authorization: Bearer $(System.AccessToken)" \
        -H "Content-Type: application/json" \
        -d "$body"
    fi
  displayName: 'Trigger Pipeline (Bash)'





+++++++±+±+
steps:
- powershell: |
    # Condition: Only trigger if this is the main branch
    if ("$(Build.SourceBranch)" -eq "refs/heads/main") {
      $org = "your-organization-name"  # Explicitly define your Azure DevOps org name
      $project = "$(System.TeamProject)"  # Current project (or hardcode the target project)
      $url = "https://dev.azure.com/$org/$project/_apis/build/builds?api-version=7.1-preview.1"

      # Define parameters (supports strings, booleans, etc.)
      $params = @{
        "Param1" = "value1"
        "Param2" = "value2"
        "FlagParam" = $true
      }

      $body = @{
        definition = @{ id = 9999 }
        parameters = ($params | ConvertTo-Json -Compress)
      } | ConvertTo-Json -Depth 10

      $headers = @{
        Authorization = "Bearer $(System.AccessToken)"
        "Content-Type" = "application/json"
      }

      # Trigger the pipeline
      Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
    }
  displayName: 'Trigger Pipeline (Azure DevOps Services)'
  condition: succeeded()  # Run only if previous steps succeed




+±++++++++++++
steps:
- powershell: |
    # Only run this step if a condition is met (e.g., branch is "main")
    if ("$(Build.SourceBranch)" -eq "refs/heads/main") {
      $org = "$(System.TeamFoundationCollectionUri)".Split('/')[2]  # Extract org from pipeline variable
      $project = "$(System.TeamProject)"
      $url = "https://dev.azure.com/$org/$project/_apis/build/builds?api-version=6.0"

      # Define parameters as a PowerShell hashtable
      $params = @{
        "Param1" = "value1"
        "Param2" = "value2"
        "FlagParam" = $true
      }

      $body = @{
        definition = @{ id = 9999 }
        parameters = ($params | ConvertTo-Json -Compress)  # Convert to JSON string
      } | ConvertTo-Json -Depth 10

      $headers = @{
        Authorization = "Bearer $(System.AccessToken)"
        "Content-Type" = "application/json"
      }

      # Trigger the build
      Invoke-RestMethod -Uri $url -Method Post -Headers $headers -Body $body
    } else {
      Write-Host "Skipping trigger for pipeline 9999 (not on main branch)."
    }
  displayName: 'Trigger Pipeline 9999 (Conditional)'
  condition: succeeded()  # Optional: Only run if previous steps succeeded









---------_;;;;;;;;;;
steps:
- task: TriggerBuild@3
  inputs:
    azureDevOpsConnection: 'https://dev.azure.com/your-organization'
    project: 'Target-Project-Name'
    buildDefinitionId: 9999
    queueBuildForUserThatTriggeredBuild: false
    authenticationMethod: 'OAuth Token'
    password: $(System.Accessoken)
    # Define parameters as a JSON string
    parameters: '{"Param1":"value1", "Param2":"value2", "FlagParam":true}' 





-------;;;;;
trigger: none  # Ensure it's not triggered automatically

parameters:
  - name: myParam
    type: string
    default: "defaultValue"

jobs:
  - job: TriggerMypipe
    steps:
      - script: |
          echo "Running mytrigger with parameter $(myParam)"

          # Triggering mypipe pipeline using the Azure DevOps REST API
          $uri = "$(System.CollectionUri)$(System.TeamProject)/_apis/pipelines/9999/runs?api-version=6.0-preview.1"

          $body = @{
              "resources" = @{
                  "pipeline" = @{
                      "id" = 9999  # Build Definition ID
                      "parameters" = @{
                          "myParam" = "$(myParam)"
                      }
                  }
              }
          } | ConvertTo-Json -Depth 10

          Write-Host "Triggering pipeline 9999 with body: $body"

          # Define the headers
          $headers = @{
              "Authorization" = "Bearer $(System.AccessToken)"
              "Content-Type" = "application/json"
          }

          # Trigger the pipeline via REST API
          Invoke-RestMethod -Uri $uri -Method Post -Headers $headers -Body $body
        env:
          SYSTEM_ACCESSTOKEN: $(System.AccessToken)











-------------;;




trigger: none  # Do not trigger automatically

parameters:
  environment: 'production'
  deploymentRegion: 'us-east'
  ns1: false
  ns2: false

stages:
  - stage: TriggerPowerPipeline
    displayName: "Trigger Power Pipeline Twice"
    jobs:
      - job: TriggerPowerJob
        steps:
          - ${{ if eq(parameters.ns1, true) }}:
              - script: echo "##vso[build.queue name=Power; parameters.environment=ns1; parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"
                displayName: "Trigger Power Pipeline with ns1"

          - ${{ if eq(parameters.ns2, true) }}:
              - script: echo "##vso[build.queue name=Power; parameters.environment=ns2; parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"
                displayName: "Trigger Power Pipeline with ns2"




------±++++++


trigger: none  # This pipeline should not trigger automatically

parameters:
  environment: 'production'
  deploymentRegion: 'us-east'
  ns1: false
  ns2: false

stages:
  - ${{ if eq(parameters.ns1, true) }}:
      - stage: TriggerPower1
        displayName: "Trigger Power1 Pipeline"
        jobs:
          - job: TriggerPower1Job
            steps:
              - script: echo "##vso[build.queue name=Power1; parameters.environment=${{ parameters.environment }}; parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"

  - ${{ if eq(parameters.ns2, true) }}:
      - stage: TriggerPower2
        displayName: "Trigger Power2 Pipeline"
        jobs:
          - job: TriggerPower2Job
            steps:
              - script: echo "##vso[build.queue name=Power2; parameters.environment=${{ parameters.environment }}; parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"









---------------------------------------

trigger: none  # This pipeline should not trigger automatically

resources:
  repositories:
    - repository: self  # This tells Azure DevOps to use the same repository

parameters:
  environment: 'production'
  deploymentRegion: 'us-east'

stages:
  - stage: TriggerPower1
    displayName: "Trigger Power1 Pipeline"
    jobs:
      - job: TriggerPower1Job
        steps:
          - script: echo "Triggering Power1 Pipeline"
          - script: |
              echo "##vso[build.queue name=power1.yaml;parameters.environment=${{ parameters.environment }};parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"
  
  - stage: TriggerPower2
    displayName: "Trigger Power2 Pipeline"
    dependsOn: TriggerPower1  # Ensure Power2 runs only after Power1
    jobs:
      - job: TriggerPower2Job
        steps:
          - script: echo "Triggering Power2 Pipeline"
          - script: |
              echo "##vso[build.queue name=power2.yaml;parameters.environment=${{ parameters.environment }};parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"







-----------------------------+

trigger: none  # The orchestrator does not trigger automatically

resources:
  pipelines:
    - pipeline: Power1Pipeline
      source: Power1
      trigger: none  # Ensure this pipeline doesn't trigger automatically

    - pipeline: Power2Pipeline
      source: Power2
      trigger: none  # Ensure this pipeline doesn't trigger automatically

parameters:
  environment: 'production'
  deploymentRegion: 'us-east'

stages:
  - stage: TriggerPower1
    displayName: "Trigger Power1 Pipeline"
    jobs:
      - job: TriggerPower1Job
        steps:
          - script: echo "Triggering Power1 Pipeline"
          - script: |
              echo "##vso[build.queue name=Power1;parameters.environment=${{ parameters.environment }};parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"
  
  - stage: TriggerPower2
    displayName: "Trigger Power2 Pipeline"
    dependsOn: TriggerPower1
    jobs:
      - job: TriggerPower2Job
        steps:
          - script: echo "Triggering Power2 Pipeline"
          - script: |
              echo "##vso[build.queue name=Power2;parameters.environment=${{ parameters.environment }};parameters.deploymentRegion=${{ parameters.deploymentRegion }}]"
